// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

int _BlockSize;
int _ResultWidth;
int _ResultHeight;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _Result;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    if (id.x >= _ResultWidth || id.y >= _ResultHeight) {
        return;
    }

    float2 startPos = id.xy * _BlockSize;

    if (id.x >= _ResultWidth || id.y >= _ResultHeight) {
        return;
    }

    const int blockWidth = min(_BlockSize, _ResultWidth - startPos.x);
    const int blockHeight = min(_BlockSize, _ResultHeight - startPos.y);
    const int numPixels = blockWidth * blockHeight;

    float4 color = float4(0, 0, 0, 0);
    for (int i = 0; i < blockWidth; i++) {
        for (int j = 0; j < blockHeight; j++) {
            const uint2 pixelPos = uint2(startPos.x + i, startPos.y + j);
            color += _Result[pixelPos];
        }
    }
    color /= numPixels;

    for (int i = 0; i < blockWidth; i++) {
        for (int j = 0; j < blockHeight; j++) {
            const uint2 pixelPos = uint2(startPos.x + i, startPos.y + j);
            _Result[pixelPos] = color;
        }
    }
}